name: CI/CD Pipeline

on:
  push:
    branches: [ '**' ]
  pull_request_target:
    types: [closed]
    branches: [main]

# Cancel in-progress workflows when a new commit is pushed
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  PYTHON_VERSION: "3.11"

jobs:
  # ============================================================================
  # QUALITY ASSURANCE JOBS (run on all branches)
  # ============================================================================

  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: pip-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/pyproject.toml', '**/requirements*.txt') }}
        restore-keys: |
          pip-${{ runner.os }}-${{ matrix.python-version }}-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: Run tests
      run: |
        pytest tests/ -v --tb=short --junitxml=test-results-${{ matrix.python-version }}.xml -m "not slow"

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}
        path: test-results-${{ matrix.python-version }}.xml
        retention-days: 2

  lint:
    name: Code Quality
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache pre-commit
      uses: actions/cache@v4
      with:
        path: ~/.cache/pre-commit
        key: pre-commit-${{ runner.os }}-${{ hashFiles('.pre-commit-config.yaml') }}

    - name: Install pre-commit
      run: |
        python -m pip install --upgrade pip
        pip install pre-commit

    - name: Run pre-commit hooks
      run: pre-commit run --all-files

  # ============================================================================
  # RELEASE PIPELINE (DISABLED for dev branch testing)
  # ============================================================================

  # Temporarily disabled for dev branch testing - uncomment when ready to re-enable
  # check-package-label:
  #   name: Check Package Label
  #   runs-on: ubuntu-latest
  #   if: github.event_name == 'pull_request_target' && github.event.pull_request.merged == true
  #   outputs:
  #     has_package_label: ${{ steps.check_label.outputs.has_label }}
  #     pr_number: ${{ github.event.pull_request.number }}
  #
  #   steps:
  #   - name: Check for Package label
  #     id: check_label
  #     uses: actions/github-script@v7
  #     with:
  #       script: |
  #         const labels = context.payload.pull_request.labels.map(label => label.name);
  #         const has_package_label = labels.includes('package');
  #
  #         console.log('PR Labels:', labels);
  #         console.log('Has package label:', has_package_label);
  #
  #         core.setOutput('has_label', has_package_label);
  #
  #         if (!has_package_label) {
  #           console.log('‚è≠Ô∏è Skipping package deployment - no Package label found');
  #         } else {
  #           console.log('‚úÖ Package label found - proceeding with deployment pipeline');
  #         }

  # # version-check:
  #   name: Version Check
  #   runs-on: ubuntu-latest
  #   needs: [test, lint, check-package-label]
  #   if: needs.check-package-label.outputs.has_package_label == 'true'
  #   outputs:
  #     version: ${{ steps.get_version.outputs.version }}
  #     version_changed: ${{ steps.check_version.outputs.changed }}
  #
  #   steps:
  #   - name: Checkout repository with full history
  #     uses: actions/checkout@v4
  #     with:
  #       fetch-depth: 0
  #       ref: ${{ github.event.pull_request.merge_commit_sha }}
  #
  #   - name: Set up Python
  #     uses: actions/setup-python@v5
  #     with:
  #       python-version: ${{ env.PYTHON_VERSION }}
  #
  #   - name: Get current version
  #     id: get_version
  #     run: |
  #       python << 'EOF'
  #       import re
  #       import sys
  #       import os
  #
  #       with open('pyproject.toml', 'r') as f:
  #         content = f.read()
  #       match = re.search(r'version = "([^"]+)"', content)
  #
  #       if not match:
  #         print("‚ùå ERROR: Could not find version in pyproject.toml")
  #         sys.exit(1)
  #
  #       version = match.group(1)
  #       with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
  #         f.write(f"version={version}\n")
  #       print(f"Current version (after merge): {version}")
  #       EOF
  #
  #   - name: Check version change against PR base
  #     id: check_version
  #     env:
  #       BASE_SHA: ${{ github.event.pull_request.base.sha }}
  #       MERGE_SHA: ${{ github.event.pull_request.merge_commit_sha }}
  #     run: |
  #       python << 'EOF'
  #       import re
  #       import subprocess
  #       import sys
  #       import os
  #
  #       def get_version_from_commit(commit_sha, commit_name):
  #         try:
  #           result = subprocess.run(['git', 'show', f'{commit_sha}:pyproject.toml'],
  #                                 capture_output=True, text=True, check=True)
  #           content = result.stdout
  #           match = re.search(r'version = "([^"]+)"', content)
  #
  #           if not match:
  #             print(f"‚ùå ERROR: Could not find version in {commit_name} ({commit_sha[:8]})")
  #             sys.exit(1)
  #
  #           version = match.group(1)
  #           print(f"Version from {commit_name} ({commit_sha[:8]}): {version}")
  #           return version
  #         except subprocess.CalledProcessError as e:
  #           print(f"‚ùå ERROR: Could not retrieve {commit_name} ({commit_sha[:8]}): {e}")
  #           sys.exit(1)
  #
  #       # Get commit SHAs from environment
  #       base_sha = os.environ.get('BASE_SHA')
  #       merge_sha = os.environ.get('MERGE_SHA')
  #
  #       if not base_sha or not merge_sha:
  #         print("‚ùå ERROR: Missing commit SHAs from GitHub event payload")
  #         sys.exit(1)
  #
  #       print(f"PR base commit (main before merge): {base_sha}")
  #       print(f"Merge commit (after PR merge): {merge_sha}")
  #
  #       # Get versions from both commits
  #       base_version = get_version_from_commit(base_sha, "PR base")
  #       merge_version = get_version_from_commit(merge_sha, "merge commit")
  #
  #       changed = base_version != merge_version
  #
  #       with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
  #         f.write(f"changed={'true' if changed else 'false'}\n")
  #
  #       if changed:
  #         print(f"‚úÖ Version changed from {base_version} ‚Üí {merge_version}")
  #       else:
  #         print(f"‚ùå Version unchanged ({base_version}) - please bump version in pyproject.toml")
  #         sys.exit(1)
  #       EOF

  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    needs: [test, lint]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build source distribution
      run: python -m build --sdist

    - name: Verify source distribution
      run: twine check dist/*.tar.gz

    - name: Upload source distribution
      uses: actions/upload-artifact@v4
      with:
        name: python-package-sdist
        path: dist/*.tar.gz
        retention-days: 2

  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    needs: [test, lint]
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-13, macos-latest]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install cibuildwheel
      run: python -m pip install cibuildwheel==2.21.3

    - name: Build wheels
      run: python -m cibuildwheel --output-dir wheelhouse
      # Configuration is now in pyproject.toml [tool.cibuildwheel] section

    - name: Upload wheels
      uses: actions/upload-artifact@v4
      with:
        name: python-package-wheels-${{ matrix.os }}
        path: wheelhouse/*.whl
        retention-days: 2
  verify_builds:
    name: Verify built packages
    runs-on: ubuntu-latest
    needs: [build_sdist, build_wheels]

    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        pattern: python-package-*
        path: dist/
        merge-multiple: true

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install verification tools
      run: |
        python -m pip install --upgrade pip
        pip install twine

    - name: Verify all packages
      run: twine check dist/*

    - name: List built packages
      run: |
        echo "üì¶ Built packages:"
        ls -la dist/
        echo ""
        echo "üìä Package summary:"
        echo "Source distributions: $(ls dist/*.tar.gz 2>/dev/null | wc -l)"
        echo "Wheels: $(ls dist/*.whl 2>/dev/null | wc -l)"
        echo ""
        echo "üêç Python versions covered:"
        ls dist/*.whl 2>/dev/null | grep -oE 'cp[0-9]+' | sort -u || echo "None"
        echo ""
        echo "üñ•Ô∏è Platforms covered:"
        ls dist/*.whl 2>/dev/null | grep -oE '(win_amd64|macosx_[0-9_]+|linux_x86_64)' | sort -u || echo "None"

    - name: Test source distribution installation
      run: |
        # Test that sdist can be installed without Cython/NumPy (pure Python fallback)
        python -m venv test_sdist_env
        source test_sdist_env/bin/activate
        pip install --upgrade pip
        # Install wheel and dependencies but not build dependencies to test fallback
        pip install wheel
        pip install scikit-learn scipy pandas tqdm pydantic joblib statsmodels
        pip install dist/*.tar.gz --no-build-isolation
        python -c "
        import confopt;
        from confopt.selection.sampling.entropy_samplers import CYTHON_AVAILABLE;
        print(f'‚úÖ Source distribution installed. Cython available: {CYTHON_AVAILABLE}');
        if not CYTHON_AVAILABLE:
            print('‚úÖ Pure Python fallback working as expected');
        "
        deactivate
        rm -rf test_sdist_env

    - name: Upload final artifacts
      uses: actions/upload-artifact@v4
      with:
        name: python-package-distributions
        path: dist/
        retention-days: 2
  test-publish:
    name: Publish to TestPyPI
    runs-on: ubuntu-latest
    needs: [verify_builds]

    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: python-package-distributions
        path: dist/

    - name: Publish to TestPyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        repository-url: https://test.pypi.org/legacy/
        password: ${{ secrets.TEST_PYPI_API_TOKEN }}
        skip-existing: true  # Skip if version already exists

    - name: Wait for TestPyPI propagation
      run: sleep 10
  verify-testpypi:
    name: Verify TestPyPI Installation
    runs-on: ubuntu-latest
    needs: [test-publish]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Get version
      id: get_version
      run: |
        # Get version from pyproject.toml
        python << 'EOF'
        import re
        import sys
        import os

        with open('pyproject.toml', 'r') as f:
            content = f.read()
        match = re.search(r'version = "([^"]+)"', content)

        if not match:
            print("‚ùå ERROR: Could not find version in pyproject.toml")
            sys.exit(1)

        version = match.group(1)
        with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
            f.write(f"version={version}\n")
        print(f"Current version: {version}")
        EOF

    - name: Test installation scenarios from TestPyPI
      run: |
        VERSION=${{ steps.get_version.outputs.version }}

        # Comprehensive test function that validates Cython usage
        validate_cython_usage() {
          local test_name="$1"
          local expected_cython="$2"

          echo "üß™ Testing: $test_name"

          # Test basic import and functionality
          python -c "
          import confopt
          from confopt.selection.sampling.entropy_samplers import calculate_entropy, CYTHON_AVAILABLE
          import numpy as np

          print(f'üìä {test_name}:')
          print(f'  - Package imported: ‚úÖ')
          print(f'  - Cython available: {CYTHON_AVAILABLE}')
          print(f'  - Expected Cython: $expected_cython')

          # Validate entropy calculation works
          test_data = np.array([1.0, 2.0, 3.0, 4.0, 5.0])

          # Test both entropy methods
          for method in ['distance', 'histogram']:
            result = calculate_entropy(test_data, method=method)
            print(f'  - Entropy ({method}): {result:.4f}')
            assert result > 0, f'Entropy calculation failed for {method}'

          # Verify Cython expectation
          if '$expected_cython' == 'True' and not CYTHON_AVAILABLE:
            raise AssertionError(f'Expected Cython but got pure Python in {test_name}')
          elif '$expected_cython' == 'False' and CYTHON_AVAILABLE:
            raise AssertionError(f'Expected pure Python but got Cython in {test_name}')

          print(f'  - Cython usage validation: ‚úÖ')
          print()
          "
        }

        # Test 1: Standard wheel installation (should use Cython)
        echo "üîÑ Test 1: Standard wheel installation from TestPyPI..."
        python -m venv test_wheel_env
        source test_wheel_env/bin/activate
        pip install --upgrade pip

        pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/ confopt==$VERSION
        validate_cython_usage "Wheel Installation" "True"

        deactivate
        rm -rf test_wheel_env

        # Test 2: Force build from source WITH compilation tools (should use Cython)
        echo "üîÑ Test 2: Source build with compilation tools..."
        python -m venv test_source_cython_env
        source test_source_cython_env/bin/activate
        pip install --upgrade pip
        pip install numpy>=1.20.0 cython>=0.29.24  # Install build deps

        CONFOPT_FORCE_CYTHON=1 pip install --no-binary=confopt --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/ confopt==$VERSION
        validate_cython_usage "Source Build with Cython" "True"

        deactivate
        rm -rf test_source_cython_env

        # Test 3: Force build from source WITHOUT compilation tools (should use Python fallback)
        echo "üîÑ Test 3: Source build without compilation tools..."
        python -m venv test_source_python_env
        source test_source_python_env/bin/activate
        pip install --upgrade pip
        # Deliberately DON'T install numpy/cython build dependencies

        pip install --no-binary=confopt --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/ confopt==$VERSION
        validate_cython_usage "Source Build Pure Python" "False"

        deactivate
        rm -rf test_source_python_env

        echo "‚úÖ All TestPyPI installation scenarios validated successfully!"
  #
  # publish:
  #   name: Publish to PyPI
  #   runs-on: ubuntu-latest
  #   needs: [verify-testpypi, version-check]
  #
  #   steps:
  #   - name: Download build artifacts
  #     uses: actions/download-artifact@v4
  #     with:
  #       name: python-package-distributions
  #       path: dist/
  #
  #   - name: Publish to PyPI
  #     uses: pypa/gh-action-pypi-publish@release/v1
  #     with:
  #       password: ${{ secrets.PYPI_API_TOKEN }}
  #
  # release:
  #   name: Create GitHub Release
  #   runs-on: ubuntu-latest
  #   needs: [publish, version-check, check-package-label]
  #   permissions:
  #     contents: write
  #
  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v4
  #
  #   - name: Download build artifacts
  #     uses: actions/download-artifact@v4
  #     with:
  #       name: python-package-distributions
  #       path: dist/
  #
  #   - name: Create GitHub Release Draft
  #     uses: softprops/action-gh-release@v2
  #     with:
  #       tag_name: v${{ needs.version-check.outputs.version }}
  #       name: Release v${{ needs.version-check.outputs.version }}
  #       body: |
  #         ## üì¶ Package Information
  #         - **Version**: ${{ needs.version-check.outputs.version }}
  #         - **PyPI**: https://pypi.org/project/confopt/${{ needs.version-check.outputs.version }}/
  #         - **Documentation**: https://confopt.readthedocs.io/en/latest/
  #
  #         ## üìã Installation
  #         ```bash
  #         pip install confopt==${{ needs.version-check.outputs.version }}
  #         ```
  #
  #         ## üîÑ Changes
  #         *Please add release notes and changelog information here before publishing.*
  #
  #         ---
  #
  #         **Build Information:**
  #         - Commit: ${{ github.sha }}
  #         - PR: #${{ needs.check-package-label.outputs.pr_number }}
  #         - Automated build completed successfully
  #       files: dist/*
  #       draft: true
  #       prerelease: false
