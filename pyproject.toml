[build-system]
requires = ["setuptools>=61.0", "wheel", "numpy>=1.20.0"]
build-backend = "setuptools.build_meta"

[project]
name = "confopt"
version = "1.1.0"
description = "Conformal hyperparameter optimization tool"
readme = "README.md"
authors = [
    {name = "Riccardo Doyle", email = "r.doyle.edu@gmail.com"}
]
requires-python = ">=3.9"
classifiers = [
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
dependencies = [
    "numpy>=1.20.0",
    "scikit-learn>=1.0.0",
    "scipy>=1.7.0",
    "pandas>=1.3.0",
    "tqdm>=4.60.0",
    "pydantic>=2.0.0",
    "joblib>=1.0.0",
    "statsmodels>=0.13.0"
]

[project.urls]
Homepage = "https://github.com/rick12000/confopt"

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-xdist>=3.0.0",
    "pre-commit>=3.4.0",
    "autoflake>=2.0.0",
]
docs = [
    "sphinx>=5.0.0",
    "sphinx-rtd-theme>=1.3.0",
    "myst-parser>=2.0.0",
    "sphinx-copybutton>=0.5.0",
    "sphinxcontrib-mermaid>=0.8.0",
]

[tool.setuptools]
packages = { find = { where = ["."] , include = ["confopt*"] } }
include-package-data = true

[tool.setuptools.package-data]
confopt = ["selection/sampling/cy_entropy.pyx", "selection/sampling/cy_entropy.c"]

[tool.cibuildwheel]
# Build only the Python versions we support
build = "cp39-* cp310-* cp311-* cp312-*"

# Skip 32-bit builds and musllinux for simplicity (can be enabled later if needed)
# Also skip i686 due to scikit-learn dependency issues on 32-bit
skip = "*-win32 *-musllinux* *-manylinux_i686 *-linux_i686"

# Install NumPy and Cython in the build environment to enable Cython compilation
before-build = "pip install numpy>=1.20.0 cython>=0.29.24"

# Environment variables to ensure Cython compilation
environment = { CONFOPT_FORCE_CYTHON = "1" }

# Test that the wheel can be imported and Cython extension works
test-command = """
python -c "
import confopt;
print('✅ Package imported successfully');
try:
  from confopt.selection.sampling.entropy_samplers import calculate_entropy, CYTHON_AVAILABLE;
  import numpy as np;
  result = calculate_entropy(np.array([1.0, 2.0, 3.0, 4.0, 5.0]));
  print(f'✅ Entropy calculation works! Cython available: {CYTHON_AVAILABLE}, Result: {result}');
except Exception as e:
  print(f'⚠️ Entropy calculation failed: {e}');
  raise;
"
"""

# Skip testing on emulated architectures (they're slow and we have fallbacks)
test-skip = "*-*linux_aarch64 *-*linux_ppc64le *-*linux_s390x"

# Platform-specific configurations
[tool.cibuildwheel.linux]
repair-wheel-command = "auditwheel repair -w {dest_dir} {wheel}"

[tool.cibuildwheel.macos]
repair-wheel-command = "delocate-wheel -w {dest_dir} {wheel}"

[tool.cibuildwheel.windows]
# Windows-specific build configuration
before-build = "python -m pip install numpy>=1.20.0 cython>=0.29.24"
repair-wheel-command = "delvewheel repair -w {dest_dir} {wheel}"
