[build-system]
requires = ["setuptools>=61.0", "wheel", "numpy>=1.20.0"]
build-backend = "setuptools.build_meta"

[project]
name = "confopt"
version = "1.2.4"
description = "Conformal hyperparameter optimization tool"
readme = "README.md"
authors = [
    {name = "Riccardo Doyle", email = "r.doyle.edu@gmail.com"}
]
requires-python = ">=3.9"
classifiers = [
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
dependencies = [
    "numpy>=1.20.0",
    "scikit-learn>=1.0.0",
    "scipy>=1.7.0",
    "pandas>=1.3.0",
    "tqdm>=4.60.0",
    "pydantic>=2.0.0",
    "joblib>=1.0.0",
    "statsmodels>=0.13.0"
]

[project.urls]
Homepage = "https://github.com/rick12000/confopt"

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-xdist>=3.0.0",
    "pre-commit>=3.4.0",
    "autoflake>=2.0.0",
]
docs = [
    "sphinx>=5.0.0",
    "sphinx-rtd-theme>=1.3.0",
    "myst-parser>=2.0.0",
    "sphinx-copybutton>=0.5.0",
    "sphinxcontrib-mermaid>=0.8.0",
]

[tool.setuptools]
packages = { find = { where = ["."] , include = ["confopt*"] } }
include-package-data = true





[tool.cibuildwheel]
# Platform-specific build configurations below - no global build to avoid conflicts

# Skip 32-bit builds and musllinux for simplicity (can be enabled later if needed)
# Also skip i686 due to scikit-learn dependency issues on 32-bit
skip = "*-win32 *-musllinux* *-manylinux_i686 *-linux_i686"

# All build configurations moved to platform-specific sections below

build-verbosity = 1

# Test that the wheel can be imported
test-command = """
python -c "
import confopt;
print('Package imported successfully');
"
"""

# Skip testing on emulated architectures (they're slow and we have fallbacks)
test-skip = "*-*linux_aarch64 *-*linux_ppc64le *-*linux_s390x"

# Platform-specific configurations
[tool.cibuildwheel.linux]
build = "cp39-*linux* cp310-*linux* cp311-*linux* cp312-*linux*"
repair-wheel-command = "auditwheel repair -w {dest_dir} {wheel}"

[tool.cibuildwheel.macos]
build = "cp39-*macosx* cp310-*macosx* cp311-*macosx* cp312-*macosx*"
repair-wheel-command = "delocate-wheel -w {dest_dir} {wheel}"

[tool.cibuildwheel.windows]
build = "cp39-*win* cp310-*win* cp311-*win* cp312-*win*"
repair-wheel-command = "delvewheel repair -w {dest_dir} {wheel}"
